Name:           hasparql-client
Version:        0.5
License:        BSD3
License-file:   LICENSE
Author:         Luiz Damascena <luizscence@gmail.com>
Maintainer:     Luiz Damascena
Homepage:       https://github.com/lhpaladin/HaSparql-Client
Category:       Semantic Web, Database
Synopsis:       This package enables to write SPARQL queries to remote endpoints.
Description:
    This package enables to write SPARQL queries to remote endpoints. It provides many of the options provided through the SPARQL protocol.
    .
    It was inspired by HSparql and SPARQL Python Wrapper (Python). For more information see also:
    .
    * <http://www.w3.org/TR/rdf-sparql-protocol/>
    .
    * <http://www.w3.org/2005/sparql-results#>
    .
    TODO list:
    .
    * Add internal conversion to RDFXML, N3, Turtle and JSON.
    .
    * Implement a parser to validate SPARQL queries.
    .
    Changes:
    .
    * Version 0.5: Now uses the streaming API of
    @xml-conduit@ to parse the SPARQL results document, so that
    processing SPARQL results should require less memory. The
    @runQuery@, @runSelectQuery@, and @runAskQuery@ functions now
    take a @QueryOptions@ structure (used to change the timeout
    length when processing a query). The default timeout period is now
    10 seconds. @ShowQuery@ is now exported from @Database.HaSparqlClient.Values@.
    .
    * Version 0.4: Changed the return of @runSelectQuery@ to include the
    variable names.
    .
    * Version 0.3.1: Clean up of 0.3.0 code (disk crash may have lost
    some of these changes); allow return MIME type to be specified for
    queries.
    .
    * Version 0.3.0: Change the @defaultgraph@ field of
    @Service@ to accept a list of graphs rather than a single,
    optional graph. Removed the @ToSPARQL@ class.
    .
    * Version 0.2.1: support URIs which include HTTP Basic 
    Authorization, such as @http:\/\/anonymous\@localhost:5822\/myDB@.
    .
    * Version 0.2.0: use of xml-conduit rather than xml;
    move to using @Text@ for strings in @BindingValue@;
    added the @ToSPARQL@ type class to support the use of an
    EDSL for query generation (unfortunately it has the wrong
    kind so you can't use it with the monadic version from
    hsparql, so will probably remove it pdq).
    .
    * Version 0.1.1: use of http-conduit rather than network 
    provides significant speed improvements (on my one 
    example case).

Stability:     experimental

extra-source-files: Tests/Tests.hs

Build-type:    Simple
Cabal-version: >= 1.6

-- forgetting about supporting old versions for now
Library
  Build-depends: 
    base >= 4 && < 5,
    bytestring >= 0.9 && < 0.11,
    conduit == 1.2.*,
    data-default == 0.5.*,
    HTTP == 4000.2.*,
    http-conduit == 2.1.*,
    http-types >= 0.7 && < 0.9,
    mtl >= 2.1 && < 2.3,
    -- may want to restrict to a recent one for the URI changes?
    network == 2.6.*,
    network-uri == 2.6.*,
    resourcet == 1.1.*,
    text >= 1.2 && < 1.3,
    xml-conduit == 1.2.*,
    xml-types == 0.3.*

  Exposed-modules:
    Database.HaSparqlClient
    Database.HaSparqlClient.Types
    Database.HaSparqlClient.Values
    Database.HaSparqlClient.Queries

  Other-modules:
    Paths_hasparql_client

  ghc-options:
    -Wall
